{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","jobStore/index.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","ListItemLink","props","react_default","a","createElement","ListItem","Object","assign","button","component","console","log","App","className","style","Button","variant","color","List","aria-label","ListItemIcon","Inbox_default","ListItemText","primary","Drafts_default","Divider","href","src","logo","alt","target","rel","React","Component","Boolean","window","location","hostname","match","jobStore","state","arguments","length","undefined","action","type","concat","toConsumableArray","id","text","completed","map","todo","objectSpread","store","createStore","rootElement","document","getElementById","ReactDOM","render","es","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8VCelCC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,OACPC,SAAU,IACVC,gBAAiBJ,EAAMK,QAAQC,WAAWC,UAI9C,SAASC,EAAaC,GACpB,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,CAAUC,QAAM,EAACC,UAAU,KAAQR,IAG5CS,QAAQC,IAAIrB,OAGSsB,mLAGjB,OACEV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,MAAMC,MAAO,CAAClB,gBAAgB,QAC3CM,EAAAC,EAAAC,cAAA,OAAKS,UAAU,cACbX,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,eAIAf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMT,UAAU,MAAMU,aAAW,wBAC/BjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUG,QAAM,GACdN,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,OAEFD,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAcC,QAAQ,WAExBrB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUG,QAAM,GACdN,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,OAEFD,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAcC,QAAQ,aAG1BrB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,MACAvB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMT,UAAU,MAAMU,aAAW,6BAC/BjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUG,QAAM,GACdN,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAcC,QAAQ,WAExBrB,EAAAC,EAAAC,cAACJ,EAAD,CAAc0B,KAAK,gBACjBxB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAcC,QAAQ,WAM1BrB,EAAAC,EAAAC,cAAA,OAAKuB,IAAKC,IAAMf,UAAU,WAAWgB,IAAI,SACzC3B,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACES,UAAU,WACVa,KAAK,sBACLI,OAAO,SACPC,IAAI,uBAJN,wBAxCuBC,IAAMC,WClBnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+FCEWC,EApBA,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrC,OAAQC,EAAOC,MACb,IAAK,WACH,SAAAC,OAAAxC,OAAAyC,EAAA,EAAAzC,CACKkC,GADL,CAEE,CACEQ,GAAIJ,EAAOI,GACXC,KAAML,EAAOK,KACbC,WAAW,KAGjB,IAAK,cACH,OAAOV,EAAMW,IAAI,SAAAC,GAAI,OACnBA,EAAKJ,KAAOJ,EAAOI,GAAnB1C,OAAA+C,EAAA,EAAA/C,CAAA,GAA6B8C,EAA7B,CAAmCF,WAAYE,EAAKF,YAAcE,IAEtE,QACE,OAAOZ,ICLTc,EAAQC,YAAYhB,GAGpBiB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAUP,MAAOA,GACfpD,EAAAC,EAAAC,cAAC0D,EAAD,OAEFN,GF8GI,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bbc30fd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\n\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction ListItemLink(props) {\n  return <ListItem button component=\"a\" {...props} />;\n}\n\nconsole.log(useStyles)\n\n\nexport default class App extends React.Component {\n \n  render() {\n    return (\n      <div className=\"App\" style={{backgroundColor:\"red\"}} >\n        <div className=\"App-header\">\n          <Button variant=\"contained\" color=\"primary\">\n            Hello World\n          </Button>\n\n          <List component=\"nav\" aria-label=\"main mailbox folders\">\n            <ListItem button>\n              <ListItemIcon>\n                <InboxIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Inbox\" />\n            </ListItem>\n            <ListItem button>\n              <ListItemIcon>\n                <DraftsIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Drafts\" />\n            </ListItem>\n          </List>\n          <Divider />\n          <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n            <ListItem button>\n              <ListItemText primary=\"Trash\" />\n            </ListItem>\n            <ListItemLink href=\"#simple-list\">\n              <ListItemText primary=\"Spam\" />\n            </ListItemLink>\n          </List>\n\n\n\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const jobStore = (state = [], action) => {\r\n    switch (action.type) {\r\n      case 'ADD_TODO':\r\n        return [\r\n          ...state,\r\n          {\r\n            id: action.id,\r\n            text: action.text,\r\n            completed: false\r\n          }\r\n        ]\r\n      case 'TOGGLE_TODO':\r\n        return state.map(todo =>\r\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n        )\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n  \r\n  export default jobStore","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux'\n\nimport { Provider } from 'react-redux'\nimport jobStore from './jobStore'\n\nconst store = createStore(jobStore)\n\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}